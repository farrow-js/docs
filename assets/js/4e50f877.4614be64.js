"use strict";(self.webpackChunkfarrow_website=self.webpackChunkfarrow_website||[]).push([[4365],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,k=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(k,l(l({ref:n},c),{},{components:t})):a.createElement(k,l({ref:n},c))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7294),r=t(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var a=t(7462),r=t(7294),o=t(6010),l=t(2466),i=t(6550),p=t(1980),s=t(7392),c=t(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,s.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function k(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,p._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=m(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[p,s]=k({queryString:t,groupId:a}),[u,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,c.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),f=(()=>{const e=p??u;return d({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),g(e)}),[s,g,o]),tabValues:o}}var f=t(2389);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:i,selectValue:p,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),m=e=>{const n=e.currentTarget,t=c.indexOf(n),a=s[t].value;a!==i&&(u(n),p(a))},d=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},s.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:m},l,{className:(0,o.Z)("tabs__item",x.tabItem,l?.className,{"tabs__item--active":i===n})}),t??n)})))}function N(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function h(e){const n=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",x.tabList)},r.createElement(b,(0,a.Z)({},e,n)),r.createElement(N,(0,a.Z)({},e,n)))}function w(e){const n=(0,f.Z)();return r.createElement(h,(0,a.Z)({key:String(n)},e))}},6628:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>k,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=t(7462),r=(t(7294),t(3905)),o=t(4866),l=t(5162);const i={title:"farrow-pipeline",authors:["tqma113"],tags:["Pipeline"],sidebar_position:0},p=void 0,s={unversionedId:"api/general/farrow-pipeline",id:"api/general/farrow-pipeline",title:"farrow-pipeline",description:"Type-Friendly middleware library.",source:"@site/docs/api/general/01-farrow-pipeline.mdx",sourceDirName:"api/general",slug:"/api/general/farrow-pipeline",permalink:"/docs/api/general/farrow-pipeline",draft:!1,editUrl:"https://github.com/farrow-js/docs/docs/api/general/01-farrow-pipeline.mdx",tags:[{label:"Pipeline",permalink:"/docs/tags/pipeline"}],version:"current",sidebarPosition:0,frontMatter:{title:"farrow-pipeline",authors:["tqma113"],tags:["Pipeline"],sidebar_position:0},sidebar:"apiSidebar",next:{title:"farrow-schema",permalink:"/docs/api/general/farrow-schema"}},c={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"API",id:"api",level:2},{value:"Context",id:"context",level:3},{value:"<code>createContext</code>",id:"createcontext",level:4},{value:"<code>Context</code>",id:"context-1",level:4},{value:"<code>isContext</code>",id:"iscontext",level:4},{value:"<code>assertContext</code>",id:"assertcontext",level:4},{value:"<code>ContextStorage</code>",id:"contextstorage",level:4},{value:"Container",id:"container",level:3},{value:"<code>createContainer</code>",id:"createcontainer",level:4},{value:"<code>Container</code>",id:"container-1",level:4},{value:"<code>isContainer</code>",id:"iscontainer",level:4},{value:"<code>assertContainer</code>",id:"assertcontainer",level:4},{value:"Pipeline",id:"pipeline",level:3},{value:"<code>createPipeline</code>",id:"createpipeline",level:4},{value:"<code>Pipeline</code>",id:"pipeline-1",level:4},{value:"<code>Middleware</code>",id:"middleware",level:4},{value:"<code>useContainer</code>",id:"usecontainer",level:4},{value:"<code>createAsyncPipeline</code>",id:"createasyncpipeline",level:4},{value:"<code>AsyncPipeline</code>",id:"asyncpipeline",level:4},{value:"Async Hook",id:"async-hook",level:3},{value:"<code>enable</code>",id:"enable",level:4},{value:"<code>disable</code>",id:"disable",level:4},{value:"Learn more",id:"learn-more",level:2}],m={toc:u},d="wrapper";function k(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Type-Friendly middleware library."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(o.Z,{groupId:"package-tool",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install farrow-pipeline\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"Yarn",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add farrow-pipeline\n")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createPipeline } from "farrow-pipeline";\n\n// 1. create\nconst pipeline = createPipeline<number, number>();\n\n// 2. attach functions\npipeline.use((count, next) => {\n  return next(count + 1);\n});\npipeline.use((count, next) => {\n  return count * 2;\n});\n\n// 3. run\nconsole.log(pipeline.run(1)); // 4 = (1 + 1) * 2\nconsole.log(pipeline.run(5)); // 12 = (5 + 1) * 2\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"context"},"Context"),(0,r.kt)("h4",{id:"createcontext"},(0,r.kt)("inlineCode",{parentName:"h4"},"createContext")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const createContext: <T>(value: T) => Context<T>;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContext } from "farrow-pipeline";\n\nconst context0 = createContext(0);\nconst context1 = createContext<{ limit?: number }>({});\n')),(0,r.kt)("h4",{id:"context-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"Context")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Context<T = any> = {\n  id: symbol;\n  [ContextSymbol]: T;\n  // create a new context equipped a new value\n  create: (value: T) => Context<T>;\n  // get context ref { value } for accessing context in current container of pipeline\n  use: () => {\n    value: T;\n  };\n  // get context value\n  get: () => T;\n  // set context value\n  set: (value: T) => void;\n  // assert context value is not null or undefined and return context value\n  assert: () => Exclude<T, undefined | null>;\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContext } from "farrow-pipeline";\n\nconst context = createContext<number | null>(0);\n\ncontext.use(); // { value: 0 }\ncontext.get(); // 0\n\ncontext.set(1);\ncontext.use(); // { value: 1 }\ncontext.get(); // 1\n\ncontext.set(null);\ncontext.use(); // { value: null }\ncontext.get(); // null\ncontext.assert(); // throw error\n\nconst newContext = context.create(2);\nnewContext.use(); // { value: 2 }\nnewContext.get(); // 2\n')),(0,r.kt)("h4",{id:"iscontext"},(0,r.kt)("inlineCode",{parentName:"h4"},"isContext")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const isContext: (input: any) => input is Context<any>;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContext, isContext } from "farrow-pipeline";\n\nconst context = createContext(0);\n\nisContext(context); // true\nisContext(context.get()); // false\nisContext(0); // false\n')),(0,r.kt)("h4",{id:"assertcontext"},(0,r.kt)("inlineCode",{parentName:"h4"},"assertContext")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const assertContext: (input: any) => asserts input is Context;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContext, assertContext } from "farrow-pipeline";\n\nconst context = createContext(0);\n\nassertContext(context); // safe\nassertContext(context.get()); // throw error\nassertContext(0); // throw error\n')),(0,r.kt)("h4",{id:"contextstorage"},(0,r.kt)("inlineCode",{parentName:"h4"},"ContextStorage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ContextStorage = {\n  [key: string]: Context;\n};\n")),(0,r.kt)("h3",{id:"container"},"Container"),(0,r.kt)("h4",{id:"createcontainer"},(0,r.kt)("inlineCode",{parentName:"h4"},"createContainer")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const createContainer: (ContextStorage?: ContextStorage) => Container;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContainer, createContext } from "farrow-pipeline";\n\nconst container0 = createContainer();\n\nconst limit = createContext(10);\nconst container1 = createContainer({ limit });\n')),(0,r.kt)("h4",{id:"container-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"Container")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Container = {\n  read: <V>(Context: Context<V>) => V;\n  write: <V>(Context: Context<V>, value: V) => void;\n  [ContainerSymbol]: true;\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContainer, createContext } from "farrow-pipeline";\n\nconst container0 = createContainer();\n\nconst limit = createContext(10);\nconst container1 = createContainer({ limit: limit.create(20) });\n\ncontainer0.read(limit); // 10\ncontainer1.read(limit); // 20\n\ncontainer0.write(limit, 30);\ncontainer0.read(limit); // 30\n')),(0,r.kt)("h4",{id:"iscontainer"},(0,r.kt)("inlineCode",{parentName:"h4"},"isContainer")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const isContainer: (input: any) => input is Container;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContainer, isContainer } from "farrow-pipeline";\n\nconst container = createContainer();\n\nisContainer(container); // true\nisContainer(0); // false\nisContainer({}); // false\n')),(0,r.kt)("h4",{id:"assertcontainer"},(0,r.kt)("inlineCode",{parentName:"h4"},"assertContainer")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const assertContainer: (input: any) => asserts input is Container;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContainer, assertContainer } from "farrow-pipeline";\n\nconst container = createContainer();\n\nassertContainer(container); // safe\nassertContainer({}); // throw error\nassertContainer(0); // throw error\n')),(0,r.kt)("h3",{id:"pipeline"},"Pipeline"),(0,r.kt)("h4",{id:"createpipeline"},(0,r.kt)("inlineCode",{parentName:"h4"},"createPipeline")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const createPipeline: <I, O>(\n  options?: PipelineOptions | undefined\n) => Pipeline<I, O>;\n\ntype PipelineOptions = {\n  // contexts for injecting to the pipeline\n  contexts?: ContextStorage;\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createPipeline } from "farrow-pipeline";\n\nconst pipeline = createPipeline<number, number>();\n')),(0,r.kt)("p",null,"Create with contexts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createPipeline, createContext } from "farrow-pipeline";\n\nconst limit = createContext(10);\n\nconst pipeline = createPipeline<number, number>({\n  contexts: {\n    limit,\n  },\n});\n')),(0,r.kt)("h4",{id:"pipeline-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"Pipeline")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Pipeline<I = unknown, O = unknown> = {\n  // add middlewares to pipeline and return pipeline\n  use: (...inputs: MiddlewareInput<I, O>[]) => Pipeline<I, O>;\n  // run a pipeline by input and received its output\n  run: (input: I, options?: RunPipelineOptions<I, O>) => O;\n  // pipeline.middleware can use in another pipeline.use(...) if their type is matched\n  middleware: Middleware<I, O>;\n};\n\ntype RunPipelineOptions<I = unknown, O = unknown> = {\n  // container which store some contexts.if container is not given, pipeline will use its internal container\n  container?: Container;\n  // if all middleware called next, then onLast would be called\n  onLast?: (input: I) => O;\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createPipeline } from "farrow-pipeline";\n\n// 1. create\nconst foo = createPipeline<number, number>();\n\n// 2. attach middleware\nfoo.use((count, next) => {\n  return next(count + 1);\n});\nfoo.use((count, next) => {\n  return count * 2;\n});\n\n// 3. run\nconsole.log(foo.run(1)); // 4 = (1 + 1) * 2\nconsole.log(foo.run(5)); // 12 = (5 + 1) * 2\n')),(0,r.kt)("p",null,"Run with ",(0,r.kt)("strong",{parentName:"p"},"Container"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{5,6,13,20}","{5,6,13,20}":!0},'import {\n  createPipeline,\n  createContext,\n  createContainer,\n} from "farrow-pipeline";\n\n// 1. create\nconst foo = createPipeline<number, number>();\nconst limit = createContext(10);\nconst container = createContainer({ limit });\n\n// 2. attach middleware\nfoo.use((count, next) => {\n  return next(count + 1);\n});\nfoo.use((count, next) => {\n  if (count > 10) return count;\n  return count * 2;\n});\n\n// 3. run\nconsole.log(foo.run(1, { container })); // 4 = (1 + 1) * 2\nconsole.log(foo.run(5, { container })); // 12 = (5 + 1) * 2\nconsole.log(foo.run(10, { container })); // 11 = (10 + 1) > 10 ? 10 + 1 : (10 + 1) * 2\n')),(0,r.kt)("p",null,"Run with ",(0,r.kt)("inlineCode",{parentName:"p"},"onLast"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"onLast")," will run when all middleware called the ",(0,r.kt)("inlineCode",{parentName:"p"},"next"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{11,18}","{11,18}":!0},'import { createPipeline } from "farrow-pipeline";\n\n// 1. create\nconst foo = createPipeline<number, number>();\n\n// 2. attach middleware\nfoo.use((count, next) => {\n  return next(count + 1);\n});\nfoo.use((count, next) => {\n  if (count > 10) return next(count);\n  return count * 2;\n});\n\n// 3. run\nconsole.log(foo.run(1)); // 4 = (1 + 1) * 2\nconsole.log(foo.run(5)); // 12 = (5 + 1) * 2\nconsole.log(foo.run(10, { onLast: (count) => count + 5 })); // 16 = (10 + 1) > 10 ? 10 + 1 + 5 : (10 + 1) * 2\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pipeline")," as middleware"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{14-19}","{14-19}":!0},'import { createPipeline } from "farrow-pipeline";\n\n// 1. create\nconst foo = createPipeline<number, number>();\n\n// 2. attach middleware\nfoo.use((count, next) => {\n  return next(count + 1);\n});\nfoo.use((count, next) => {\n  return count * 2;\n});\n\nconst bar = createPipeline<number, number>();\n\nbar.use(foo);\n\nconsole.log(bar.run(1)); // 4 = (1 + 1) * 2\nconsole.log(bar.run(5)); // 12 = (5 + 1) * 2\n')),(0,r.kt)("h4",{id:"middleware"},(0,r.kt)("inlineCode",{parentName:"h4"},"Middleware")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Middleware<I = unknown, O = unknown> = (input: I, next: Next<I, O>) => O;\n\ntype Middlewares<I = unknown, O = unknown> = Middleware<I, O>[];\n\ntype MiddlewareInput<I = unknown, O = unknown> =\n  | Middleware<I, O>\n  | { middleware: Middleware<I, O> };\n")),(0,r.kt)("h4",{id:"usecontainer"},(0,r.kt)("inlineCode",{parentName:"h4"},"useContainer")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const useContainer: () => Container;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{10,11}","{10,11}":!0},'import {\n  createPipeline,\n  createContext,\n  createContainer,\n  useContainer,\n} from "farrow-pipeline";\n\n// 1. create\nconst foo = createPipeline<number, number>();\nconst limit = createContext(10);\nconst container = createContainer({ limit });\n\n// 2. attach middleware\nfoo.use((count, next) => {\n  const innerContainer = useContainer();\n  innerContainer === container; // true\n  return next(count + 1);\n});\n\n// 3. run\nconsole.log(foo.run(1, { container })); // 4 = (1 + 1) * 2\n')),(0,r.kt)("h4",{id:"createasyncpipeline"},(0,r.kt)("inlineCode",{parentName:"h4"},"createAsyncPipeline")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const createAsyncPipeline: <I, O>(\n  options?: PipelineOptions | undefined\n) => AsyncPipeline<I, O>;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createAsyncPipeline } from "farrow-pipeline";\n\nconst pipeline = createAsyncPipeline<number, number>();\n')),(0,r.kt)("p",null,"Create with contexts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createAsyncPipeline, createContext } from "farrow-pipeline";\n\nconst limit = createContext(10);\n\nconst pipeline = createAsyncPipeline<number, number>({\n  contexts: {\n    limit,\n  },\n});\n')),(0,r.kt)("h4",{id:"asyncpipeline"},(0,r.kt)("inlineCode",{parentName:"h4"},"AsyncPipeline")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type AsyncPipeline<I = unknown, O = unknown> = Pipeline<I, MaybeAsync<O>> & {\n  useLazy: (thunk: ThunkMiddlewareInput<I, O>) => AsyncPipeline<I, O>;\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{10-12,15-16}","{10-12,15-16}":!0},'import { createAsyncPipeline } from "farrow-pipeline";\n\n// 1. create\nconst foo = createAsyncPipeline<number, number>();\n\n// 2. attach middleware\nfoo.use((count, next) => {\n  return next(count + 1);\n});\nfoo.useLazy(async () => {\n  return (count, next) => count * 2;\n});\n\n// 3. run\nconsole.log(await foo.run(1)); // 4 = (1 + 1) * 2\nconsole.log(await foo.run(5)); // 12 = (5 + 1) * 2\n')),(0,r.kt)("h3",{id:"async-hook"},"Async Hook"),(0,r.kt)("p",null,"Open/close the feature: Async Hook with function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { enable, disable } from "farrow-pipeline/asyncHooks.node";\n')),(0,r.kt)("h4",{id:"enable"},(0,r.kt)("inlineCode",{parentName:"h4"},"enable")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const enable: () => void;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { enable } from "farrow-pipeline/asyncHooks.node";\n\nenable();\n')),(0,r.kt)("h4",{id:"disable"},(0,r.kt)("inlineCode",{parentName:"h4"},"disable")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const disable: () => void;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { disable } from "farrow-pipeline/asyncHooks.node";\n\ndisable();\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Node.js performance will be worse with this on, with Promise taking two to three times longer to run, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bmeurer/async-hooks-performance-impact"},"bmeurer/async-hooks-performance-impact")," for details.")),(0,r.kt)("h4",{id:""}),(0,r.kt)("h2",{id:"learn-more"},"Learn more"),(0,r.kt)("admonition",{title:"Relative Module",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/api/http/farrow-http"},"farrow-http"),": A Type-Friendly Web Framework based on ",(0,r.kt)("strong",{parentName:"li"},"farrow-pipeline"),"."))),(0,r.kt)("admonition",{title:"Sample",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tqma113/farrow-sample/tree/main/samples/01-pipeline-base"},"farrow-sample/01-pipeline-base"),": Base usage of ",(0,r.kt)("strong",{parentName:"li"},"farrow-pipeline"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tqma113/farrow-sample/tree/main/samples/02-pipeline-more"},"farrow-sample/02-pipeline-more"),": More compelex sample of ",(0,r.kt)("strong",{parentName:"li"},"farrow-pipeline"),".\n:::"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/modern-js-dev/modern.js/tree/main/packages/toolkit/plugin"},"@modern-js/plugin"))),(0,r.kt)("p",null,":::"))}k.isMDXComponent=!0}}]);