"use strict";(self.webpackChunkfarrow_website=self.webpackChunkfarrow_website||[]).push([[9285],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,k=d["".concat(p,".").concat(c)]||d[c]||u[c]||l;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>V});var a=n(7462),r=n(7294),l=n(6010),i=n(2466),o=n(6550),p=n(1980),s=n(7392),m=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,p._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function N(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=u(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[p,s]=k({queryString:n,groupId:a}),[d,N]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,m.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),g=(()=>{const e=p??d;return c({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),N(e)}),[s,N,l]),tabValues:l}}var g=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:o,selectValue:p,tabValues:s}=e;const m=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),u=e=>{const t=e.currentTarget,n=m.indexOf(t),a=s[n].value;a!==o&&(d(t),p(a))},c=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=m.indexOf(e.currentTarget)+1;t=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(e.currentTarget)-1;t=m[n]??m[m.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:c,onClick:u},i,{className:(0,l.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function h(e){const t=N(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",y.tabList)},r.createElement(f,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function V(e){const t=(0,g.Z)();return r.createElement(h,(0,a.Z)({key:String(t)},e))}},3285:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),i=n(5162);const o={title:"farrow-schema",authors:["tqma113"],tags:["Schema"],sidebar_position:1},p=void 0,s={unversionedId:"api/general/farrow-schema",id:"api/general/farrow-schema",title:"farrow-schema",description:"Powerful and extensible schema builder library. Create Schema like type of TypeSccript.",source:"@site/docs/api/general/02-farrow-schema.mdx",sourceDirName:"api/general",slug:"/api/general/farrow-schema",permalink:"/docs/api/general/farrow-schema",draft:!1,editUrl:"https://github.com/farrow-js/docs/docs/api/general/02-farrow-schema.mdx",tags:[{label:"Schema",permalink:"/docs/tags/schema"}],version:"current",sidebarPosition:1,frontMatter:{title:"farrow-schema",authors:["tqma113"],tags:["Schema"],sidebar_position:1},sidebar:"apiSidebar",previous:{title:"farrow-pipeline",permalink:"/docs/api/general/farrow-pipeline"},next:{title:"farrow-module",permalink:"/docs/api/general/farrow-module"}},m={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"API",id:"api",level:2},{value:"Schema Builder",id:"schema-builder",level:3},{value:"Primitive",id:"primitive",level:4},{value:"Literal",id:"literal",level:4},{value:"List",id:"list",level:4},{value:"Struct",id:"struct",level:4},{value:"ObjectType",id:"objecttype",level:4},{value:"Meta",id:"meta",level:4},{value:"Generic",id:"generic",level:4},{value:"Util",id:"util",level:4},{value:"Formatter",id:"formatter",level:3},{value:"formatSchema",id:"formatschema",level:4},{value:"Validator",id:"validator",level:3},{value:"createSchemaValidator",id:"createschemavalidator",level:4},{value:"Strict Mode",id:"strict-mode",level:4},{value:"Type Infer",id:"type-infer",level:3},{value:"<code>TypeOf</code>",id:"typeof",level:4},{value:"Learn more",id:"learn-more",level:2}],u={toc:d},c="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Powerful and extensible schema builder library. Create Schema like type of ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeSccript"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(l.Z,{groupId:"package-tool",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install farrow-schema\n"))),(0,r.kt)(i.Z,{value:"yarn",label:"Yarn",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add farrow-schema\n")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Struct, ID, TypeOf } from "farrow-schema";\nimport { Validator } from "farrow-schema/validator";\n\nconst user = Struct({\n  id: ID,\n  name: String,\n});\n\nconst result = Validator.validate(User, {\n  id: "foo",\n  name: "foo name",\n});\n\nif (result.isOk) {\n  console.log(result.value);\n}\n\ntype User = TypeOf<typeof User>;\n\n// \u76f8\u540c\u7c7b\u578b\ntype User = {\n  id: string;\n  name: string;\n};\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"schema-builder"},"Schema Builder"),(0,r.kt)("h4",{id:"primitive"},"Primitive"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Number;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"typeof V === 'number' && !isNaN(V)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = String")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"typeof V === 'string'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"typeof V === 'boolean'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Date")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = Date")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Date.isDate(V)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = ID")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"typeof V === 'string'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Int")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number.isInteger(V)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Float")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"typeof V === 'number' && !isNaN(V)"))))),(0,r.kt)("h4",{id:"literal"},"Literal"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Literal(Number Value | String Value | Boolean Value | Date Value);\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Literal(0)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = 0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"V === 0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'const V = Literal("foo")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'type V = "foo"')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'V === "foo"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Literal(true)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = true")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"V === true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Literal(C = new Date())")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = Date")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"V === C"))))),(0,r.kt)("h4",{id:"list"},"List"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = List($Schema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nconst V = List(Number);\n\n// Type\ntype V = Array<number>;\n\n// Validation\nArray.isArray(V) && V.every((c) => typeof c === "number" && !isNaN(c));\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Schema\nconst V = List(Literal(0));\n\n// Type\ntype V = Array<0>;\n\n// Validation\nArray.isArray(V) && V.every((c) => c === 0);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nconst V = List(\n  Struct({\n    id: ID,\n    name: String,\n  })\n);\n\n// Type\ntype V = Array<{\n  id: string;\n  name: string;\n}>;\n\n// Validation\nArray.isArray(V) &&\n  V.every((c) => {\n    const cIsObject = typeof c === "object";\n    const idIsString = typeof c.id === "string";\n    const nameIsString = typeof c.name === "string";\n    return cIsObject && idIsString && nameIsString;\n  });\n')),(0,r.kt)("h4",{id:"struct"},"Struct"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const FieldSchema = {\n  [key: string]: $Schema | $FieldSchema\n}\nconst V = Struct($FieldSchema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nconst V = Struct({\n  id: ID,\n  name: String,\n});\n\n// Type\ntype V = {\n  id: string;\n  name: string;\n};\n\n// Validation\nconst cIsObject = typeof V === "object";\nconst idIsString = typeof V.id === "string";\nconst nameIsString = typeof V.name === "string";\ncIsObject && idIsString && nameIsString;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nconst V = Struct({\n  id: ID,\n  name: String,\n  artile: {\n    title: String,\n    description: String,\n  },\n});\n\n// Type\ntype V = {\n  id: string;\n  name: string;\n  article: {\n    title: string;\n    description: string;\n  };\n};\n\n// Validation\nconst cIsObject = typeof V === "object";\nconst idIsString = typeof V.id === "string";\nconst nameIsString = typeof V.name === "string";\nconst articleIsObject = typeof V.article === "object";\nconst titleIsString = typeof V.article.title === "string";\nconst descriptionIsString = typeof V.article.description === "string";\ncIsObject &&\n  idIsString &&\n  nameIsString &&\n  articleIsObject &&\n  titleIsString &&\n  descriptionIsString;\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"Struct")," cannot construct recusive type. It will throw error if you make ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Recursive_data_type#:~:text=In%20computer%20programming%20languages%2C%20a,usually%20viewed%20as%20directed%20graphs."},"recursive type")," with this.")),(0,r.kt)("h4",{id:"objecttype"},"ObjectType"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class V extends ObjectType {\n  $FieldSchema;\n  ...\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nclass V extends ObjectType {\n  id = ID;\n  name = String;\n}\n\n// Type\ntype V = {\n  id: string;\n  name: string;\n};\n\n// Validation\nconst vIsObject = typeof V === "object";\nconst idIsString = typeof V.id === "string";\nconst nameIsString = typeof V.name === "string";\nvIsObject && idIsString && nameIsString;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nclass V extends ObjectType {\n  value = Number;\n  next = Nullable(V);\n}\n\n// Type\ntype V = {\n  value: number;\n  next: V | undefined;\n};\n\n// Validation\nconst vIsObject = typeof V === "object";\nconst vauleIsNumber = typeof V.id === "number";\nconst nextIsVOrUndefined = V.name === undefined || V.next is V;\nvIsObject && vauleIsNumber && nextIsVOrUndefined;\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"ObjectType")," can construct ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Recursive_data_type#:~:text=In%20computer%20programming%20languages%2C%20a,usually%20viewed%20as%20directed%20graphs."},"recursive type"),".")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"One point to note about recursive type is that the constructed schema cannot be infinitely recursive, and there are three main ways to interrupt infinite recursion: option, lazy, and reference, while in farrow-schema, it is mainly by way of option. Nullable, List can do it.")),(0,r.kt)("h4",{id:"meta"},"Meta"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Null;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"V === null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Undefined")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = undefined")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"V === undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Any")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = any")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Unknown")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = Unknown")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Json")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = JsonType")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"JSON.parse(JSON.stringify(V))"))))),(0,r.kt)("h4",{id:"generic"},"Generic"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Union"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Union($Schema, $Schema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Intersect"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Intersect($Schema, $Schema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Tuple"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Tuple(...$Schema[]);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Record"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Record($Schema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Nullable"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Nullable($Schema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Strict"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Strict($Schema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NonStrict"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = NonStrict($Schema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReadOnly"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = ReadOnly($Schema);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReadOnlyDeep"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = ReadOnlyDeep($Schema);\n")),(0,r.kt)("p",null,"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = Struct({ foo: String });\nconst Bar = Struct({ bar: Number });\nconst Baz = Struct({ foo: { bar: String } });\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Union(String, Number)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = string \\| number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"V is string \\|\\| V is number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Intersect(Foo, Bar)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { foo: string } && { bar: number }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Tuple(String, Number, Literal(0))")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = [string, number, 0]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'Array.isArray(V) && typeof V[0] === "string" && typeof V[1] === "number" && V[2] === 0'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Record(Number)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = Record<string, number>")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = Strict(Foo)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { foo: string }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = NonStrict(Foo)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { foo: string }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = ReadOnly(Foo)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { readonly foo: string }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = ReadOnly(Baz)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { readonly foo: { bar: string } }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = ReadOnlyDeep(Baz)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { readonly foo: { readonly bar: string } }")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h4",{id:"util"},"Util"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pick"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = pick(C = $Struct | $ObjectType, $keyof C);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"omit"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = omit(C = $Struct | $ObjectType, $keyof C);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keyof"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = keyof($Struct | $ObjectType);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"partial"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const V = partial($Struct | $ObjectType);\n")),(0,r.kt)("p",null,"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = Struct({ foo0: String, foo1: Number });\nconst Bar = Struct({ bar0: String, bar1: Number });\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Schema"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'const V = pick(Foo, "foo0")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { foo0: string }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'const V = pick(Bar, "bar0")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { bar0: string }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'const V = omit(Foo, "foo0")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { foo1: number }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'const V = omit(Bar, "bar0")')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { bar1: number }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = keyof(Foo)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'type V = "foo0" \\| "foo1"')),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = keyof(Bar)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'type V = "bar0" \\| "bar1"')),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = partial(Foo)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { foo0?: string, foo1?: number }")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const V = partial(Bar)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type V = { bar0?: string, bar1?: number }")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"formatter"},"Formatter"),(0,r.kt)("h4",{id:"formatschema"},"formatSchema"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const formatSchema: <T extends S.SchemaCtor<S.Schema>>(\n  Ctor: T,\n  context?: FormatContext | undefined\n) => {\n  typeId: number;\n  types: FormatTypes;\n};\n\ntype FormatContext = {\n  addType: (type: FormatType) => number;\n  formatCache: WeakMap<Function, number>;\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const result = formatSchema(Number)\n\n// alternative\n{\n  typeId: 0,\n  types: {\n    '0': {\n      type: 'Scalar',\n      valueType: 'number',\n      valueName: 'Number',\n    },\n  },\n}\n")),(0,r.kt)("h3",{id:"validator"},"Validator"),(0,r.kt)("h4",{id:"createschemavalidator"},"createSchemaValidator"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const createSchemaValidator: <S extends S.SchemaCtor<S.Schema>>(\n  SchemaCtor: S,\n  options?: ValidatorOptions | undefined\n) => (input: unknown) => ValidationResult<S.TypeOf<S>>;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { ID, Struct } from "farrow-schema";\nimport { Validator } from "farrow-schema/validator";\n\nconst User = Struct({\n  id: ID,\n  name: String,\n});\n\nconst result = Validator.validate(User, {\n  id: "foo",\n  name: "foo name",\n});\n\nif (result.isOk) {\n  console.log(result.value);\n}\n')),(0,r.kt)("h4",{id:"strict-mode"},"Strict Mode"),(0,r.kt)("p",null,"The strict mode is defaultly open while validating. When a Schema wrapped by ",(0,r.kt)("inlineCode",{parentName:"p"},"NonStrict"),", the strict mode will be closed. It affects below schema."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can control the strict mode by option of ",(0,r.kt)("inlineCode",{parentName:"p"},"Validator.validate"),", like:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Number, "123.32", { strict: false });\n'))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Number, 123.32);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,r.kt)("inlineCode",{parentName:"p"},"123.32"),"(It means validate successfully)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Number, "123.32");\nconst result1 = Validator.validate(Number, "123.32", { strict: false });\n')),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,r.kt)("inlineCode",{parentName:"p"},"123.32")," when strict mode is close. It will try to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Int")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Int, 123);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,r.kt)("inlineCode",{parentName:"p"},"123"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const result1 = Validator.validate(Int, 123.32);\nconst result1 = Validator.validate(Int, 123.32, { strict: false });\n")),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,r.kt)("inlineCode",{parentName:"p"},"123")," when strict mode is close. It will try to ",(0,r.kt)("inlineCode",{parentName:"p"},"Math.floor")," the input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const result2 = Validator.validate(Int, "123");\nconst result2 = Validator.validate(Int, "123", { strict: false });\n')),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"result2")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,r.kt)("inlineCode",{parentName:"p"},"123")," when strict mode is close. It will try to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const result3 = Validator.validate(Int, "123.32");\nconst result3 = Validator.validate(Int, "123.32", { strict: false });\n')),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"result3")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,r.kt)("inlineCode",{parentName:"p"},"123")," when strict mode is close. It will try to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Math.floor")," the result."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Float")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Float, 123.32);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Float, "123.32");\nconst result1 = Validator.validate(Float, "123.32", { strict: false });\n')),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,r.kt)("inlineCode",{parentName:"p"},"123.32")," when strict mode is close. It will try to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Boolean")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Boolean, true);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Boolean, "true");\nconst result1 = Validator.validate(Boolean, "true", { strict: false });\n')),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," when strict mode is close. It will try to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Literal")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Literal(123), 123);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Literal(123), "123");\nconst result1 = Validator.validate(Literal(123), "123", { strict: false });\n')),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,r.kt)("inlineCode",{parentName:"p"},"123")," when strict mode is close. It will try to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Struct")),(0,r.kt)("p",null,"Schema declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = Struct({\n  id: Number,\n  name: String,\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const result0 = Validator.validate(Foo, { id: 0, name: "foo" });\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const result1 = Validator.validate(Literal(123), '{ id: 0, name: \"foo\" }');\nconst result1 = Validator.validate(Literal(123), '{ id: 0, name: \"foo\" }', {\n  strict: false,\n});\n")),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,r.kt)("inlineCode",{parentName:"p"},'{ id: 0, name: "foo" }')," when strict mode is close. It will try to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonType"),"."),(0,r.kt)("h3",{id:"type-infer"},"Type Infer"),(0,r.kt)("h4",{id:"typeof"},(0,r.kt)("inlineCode",{parentName:"h4"},"TypeOf")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"type T = TypeOf<typeof $Schema>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type T = TypeOf<typeof Number>;\n\n// alternative\ntype T = number;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type T = TypeOf<typeof List(Number)>;\n\n// alternative\ntype T = number[];\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type T = TypeOf<typeof Union(Number, String)>;\n\n// alternative\ntype T = number | string;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type T = TypeOf<typeof Struct({ foo: String })>;\n\n// alternative\ntype T = { foo: string };\n")),(0,r.kt)("h2",{id:"learn-more"},"Learn more"),(0,r.kt)("admonition",{title:"Relative Module",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/api/rpc/farrow-api"},"farrow-api"),": Schema-based Api builder."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/api/rpc/farrow-api-server"},"farrow-api-server"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/rpc/farrow-api"},"farrow-api")," adapter for ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/http/farrow-http"},"farrow-http"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/api/http/farrow-http"},"farrow-http"),": A Type-Friendly Web Framework based on ",(0,r.kt)("strong",{parentName:"li"},"farrow-pipeline"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/api/cli/farrow-json-schema"},"farrow-json-schema"),": Tool for Transforming ",(0,r.kt)("strong",{parentName:"li"},"farrow-schema")," to ",(0,r.kt)("a",{parentName:"li",href:"https://json-schema.org/"},"json schema"),"."))),(0,r.kt)("admonition",{title:"Sample",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tqma113/farrow-sample/tree/main/samples/03-schema-base"},"farrow-sample/03-schema-base"),": Base usage of ",(0,r.kt)("strong",{parentName:"li"},"farrow-pipeline"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tqma113/farrow-sample/tree/main/samples/04-schema-more"},"farrow-sample/04-schema-more"),": More compelex sample of ",(0,r.kt)("strong",{parentName:"li"},"farrow-pipeline"),"."))))}k.isMDXComponent=!0}}]);