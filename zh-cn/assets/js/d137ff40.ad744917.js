"use strict";(self.webpackChunkfarrow_website=self.webpackChunkfarrow_website||[]).push([[9285],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=m(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||s[c]||l;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(3117),r=n(7294),l=n(2389),i=n(9443);var o=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},p=n(9521),m=n(6010),d="tabItem_vU9c";function s(e){var t,n,a,l=e.lazy,i=e.block,s=e.defaultValue,u=e.values,c=e.groupId,k=e.className,N=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=u?u:N.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),h=(0,p.lx)(g,(function(e,t){return e.value===t.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===s?s:null!=(t=null!=s?s:null==(n=N.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=N[0])?void 0:a.props.value;if(null!==f&&!g.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=o(),v=y.tabGroupChoices,b=y.setTabGroupChoices,V=(0,r.useState)(f),C=V[0],w=V[1],S=[],T=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=c){var I=v[c];null!=I&&I!==C&&g.some((function(e){return e.value===I}))&&w(I)}var O=function(e){var t=e.currentTarget,n=S.indexOf(t),a=g[n].value;a!==C&&(T(t),w(a),null!=c&&b(c,a))},x=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=S.indexOf(e.currentTarget)+1;n=S[a]||S[0];break;case"ArrowLeft":var r=S.indexOf(e.currentTarget)-1;n=S[r]||S[S.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,m.Z)("tabs",{"tabs--block":i},k)},g.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,className:(0,m.Z)("tabs__item",d,{"tabs__item--active":C===t}),key:t,ref:function(e){return S.push(e)},onKeyDown:x,onFocus:O,onClick:O},null!=n?n:t)}))),l?(0,r.cloneElement)(N.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},N.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function u(e){var t=(0,l.Z)();return r.createElement(s,(0,a.Z)({key:String(t)},e))}},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},3285:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return u},default:function(){return k}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=n(6396),o=n(8215),p=["components"],m={title:"farrow-schema",authors:["tqma113"],tags:["Schema"],sidebar_position:1},d=void 0,s={unversionedId:"api/general/farrow-schema",id:"api/general/farrow-schema",isDocsHomePage:!1,title:"farrow-schema",description:"Powerful and extensible schema builder library. Create Schema like type of TypeSccript.",source:"@site/docs/api/general/02-farrow-schema.mdx",sourceDirName:"api/general",slug:"/api/general/farrow-schema",permalink:"/zh-cn/docs/api/general/farrow-schema",editUrl:"https://github.com/farrow-js/docs/docs/api/general/02-farrow-schema.mdx",tags:[{label:"Schema",permalink:"/zh-cn/docs/tags/schema"}],version:"current",sidebarPosition:1,frontMatter:{title:"farrow-schema",authors:["tqma113"],tags:["Schema"],sidebar_position:1},sidebar:"apiSidebar",previous:{title:"farrow-pipeline",permalink:"/zh-cn/docs/api/general/farrow-pipeline"},next:{title:"farrow-module",permalink:"/zh-cn/docs/api/general/farrow-module"}},u=[{value:"Installation",id:"installation",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"API",id:"api",children:[{value:"Schema Builder",id:"schema-builder",children:[{value:"Primitive",id:"primitive",children:[],level:4},{value:"Literal",id:"literal",children:[],level:4},{value:"List",id:"list",children:[],level:4},{value:"Struct",id:"struct",children:[],level:4},{value:"ObjectType",id:"objecttype",children:[],level:4},{value:"Meta",id:"meta",children:[],level:4},{value:"Generic",id:"generic",children:[],level:4},{value:"Util",id:"util",children:[],level:4}],level:3},{value:"Formatter",id:"formatter",children:[{value:"formatSchema",id:"formatschema",children:[],level:4}],level:3},{value:"Validator",id:"validator",children:[{value:"createSchemaValidator",id:"createschemavalidator",children:[],level:4},{value:"Strict Mode",id:"strict-mode",children:[],level:4}],level:3},{value:"Type Infer",id:"type-infer",children:[{value:"<code>TypeOf</code>",id:"typeof",children:[],level:4}],level:3}],level:2},{value:"Learn more",id:"learn-more",children:[],level:2}],c={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Powerful and extensible schema builder library. Create Schema like type of ",(0,l.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeSccript"),"."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)(i.Z,{groupId:"package-tool",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"npm",label:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install farrow-schema\n"))),(0,l.kt)(o.Z,{value:"yarn",label:"Yarn",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add farrow-schema\n")))),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Struct, ID, TypeOf } from "farrow-schema";\nimport { Validator } from "farrow-schema/validator";\n\nconst user = Struct({\n  id: ID,\n  name: String,\n});\n\nconst result = Validator.validate(User, {\n  id: "foo",\n  name: "foo name",\n});\n\nif (result.isOk) {\n  console.log(result.value);\n}\n\ntype User = TypeOf<typeof User>;\n\n// \u76f8\u540c\u7c7b\u578b\ntype User = {\n  id: string;\n  name: string;\n};\n')),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("h3",{id:"schema-builder"},"Schema Builder"),(0,l.kt)("h4",{id:"primitive"},"Primitive"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Number;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"typeof V === 'number' && !isNaN(V)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"typeof V === 'string'"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Boolean")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = boolean")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"typeof V === 'boolean'"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Date.isDate(V)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = ID")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"typeof V === 'string'"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Int")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Number.isInteger(V)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Float")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"typeof V === 'number' && !isNaN(V)"))))),(0,l.kt)("h4",{id:"literal"},"Literal"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Literal(Number Value | String Value | Boolean Value | Date Value);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Literal(0)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = 0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"V === 0"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'const V = Literal("foo")')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'type V = "foo"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'V === "foo"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Literal(true)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = true")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"V === true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Literal(C = new Date())")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"V === C"))))),(0,l.kt)("h4",{id:"list"},"List"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = List($Schema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nconst V = List(Number);\n\n// Type\ntype V = Array<number>;\n\n// Validation\nArray.isArray(V) && V.every((c) => typeof c === "number" && !isNaN(c));\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Schema\nconst V = List(Literal(0));\n\n// Type\ntype V = Array<0>;\n\n// Validation\nArray.isArray(V) && V.every((c) => c === 0);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nconst V = List(\n  Struct({\n    id: ID,\n    name: String,\n  })\n);\n\n// Type\ntype V = Array<{\n  id: string;\n  name: string;\n}>;\n\n// Validation\nArray.isArray(V) &&\n  V.every((c) => {\n    const cIsObject = typeof c === "object";\n    const idIsString = typeof c.id === "string";\n    const nameIsString = typeof c.name === "string";\n    return cIsObject && idIsString && nameIsString;\n  });\n')),(0,l.kt)("h4",{id:"struct"},"Struct"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const FieldSchema = {\n  [key: string]: $Schema | $FieldSchema\n}\nconst V = Struct($FieldSchema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nconst V = Struct({\n  id: ID,\n  name: String,\n});\n\n// Type\ntype V = {\n  id: string;\n  name: string;\n};\n\n// Validation\nconst cIsObject = typeof V === "object";\nconst idIsString = typeof V.id === "string";\nconst nameIsString = typeof V.name === "string";\ncIsObject && idIsString && nameIsString;\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nconst V = Struct({\n  id: ID,\n  name: String,\n  artile: {\n    title: String,\n    description: String,\n  },\n});\n\n// Type\ntype V = {\n  id: string;\n  name: string;\n  article: {\n    title: string;\n    description: string;\n  };\n};\n\n// Validation\nconst cIsObject = typeof V === "object";\nconst idIsString = typeof V.id === "string";\nconst nameIsString = typeof V.name === "string";\nconst articleIsObject = typeof V.article === "object";\nconst titleIsString = typeof V.article.title === "string";\nconst descriptionIsString = typeof V.article.description === "string";\ncIsObject &&\n  idIsString &&\n  nameIsString &&\n  articleIsObject &&\n  titleIsString &&\n  descriptionIsString;\n')),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"Struct")," cannot construct recusive type. It will throw error if you make ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Recursive_data_type#:~:text=In%20computer%20programming%20languages%2C%20a,usually%20viewed%20as%20directed%20graphs."},"recursive type")," with this."))),(0,l.kt)("h4",{id:"objecttype"},"ObjectType"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"class V extends ObjectType {\n  $FieldSchema;\n  ...\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nclass V extends ObjectType {\n  id = ID;\n  name = String;\n}\n\n// Type\ntype V = {\n  id: string;\n  name: string;\n};\n\n// Validation\nconst vIsObject = typeof V === "object";\nconst idIsString = typeof V.id === "string";\nconst nameIsString = typeof V.name === "string";\nvIsObject && idIsString && nameIsString;\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// Schema\nclass V extends ObjectType {\n  value = Number;\n  next = Nullable(V);\n}\n\n// Type\ntype V = {\n  value: number;\n  next: V | undefined;\n};\n\n// Validation\nconst vIsObject = typeof V === "object";\nconst vauleIsNumber = typeof V.id === "number";\nconst nextIsVOrUndefined = V.name === undefined || V.next is V;\nvIsObject && vauleIsNumber && nextIsVOrUndefined;\n')),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"ObjectType")," can construct ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Recursive_data_type#:~:text=In%20computer%20programming%20languages%2C%20a,usually%20viewed%20as%20directed%20graphs."},"recursive type"),"."))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"One point to note about recursive type is that the constructed schema cannot be infinitely recursive, and there are three main ways to interrupt infinite recursion: option, lazy, and reference, while in farrow-schema, it is mainly by way of option. Nullable, List can do it."))),(0,l.kt)("h4",{id:"meta"},"Meta"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Null;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Null")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = null")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"V === null"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Undefined")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = undefined")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"V === undefined"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Unknown")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = Unknown")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Json")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = JsonType")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"JSON.parse(JSON.stringify(V))"))))),(0,l.kt)("h4",{id:"generic"},"Generic"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Union"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Union($Schema, $Schema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Intersect"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Intersect($Schema, $Schema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Tuple"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Tuple(...$Schema[]);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Record"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Record($Schema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Nullable"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Nullable($Schema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Strict"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = Strict($Schema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NonStrict"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = NonStrict($Schema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ReadOnly"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = ReadOnly($Schema);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ReadOnlyDeep"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = ReadOnlyDeep($Schema);\n")),(0,l.kt)("p",null,"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = Struct({ foo: String });\nconst Bar = Struct({ bar: Number });\nconst Baz = Struct({ foo: { bar: String } });\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Union(String, Number)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = string \\| number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"V is string \\|\\| V is number"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Intersect(Foo, Bar)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { foo: string } && { bar: number }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Tuple(String, Number, Literal(0))")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = [string, number, 0]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'Array.isArray(V) && typeof V[0] === "string" && typeof V[1] === "number" && V[2] === 0'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Record(Number)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = Record<string, number>")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = Strict(Foo)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { foo: string }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = NonStrict(Foo)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { foo: string }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = ReadOnly(Foo)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { readonly foo: string }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = ReadOnly(Baz)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { readonly foo: { bar: string } }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = ReadOnlyDeep(Baz)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { readonly foo: { readonly bar: string } }")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h4",{id:"util"},"Util"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pick"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = pick(C = $Struct | $ObjectType, $keyof C);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"omit"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = omit(C = $Struct | $ObjectType, $keyof C);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"keyof"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = keyof($Struct | $ObjectType);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"partial"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const V = partial($Struct | $ObjectType);\n")),(0,l.kt)("p",null,"Declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = Struct({ foo0: String, foo1: Number });\nconst Bar = Struct({ bar0: String, bar1: Number });\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Validation"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'const V = pick(Foo, "foo0")')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { foo0: string }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'const V = pick(Bar, "bar0")')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { bar0: string }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'const V = omit(Foo, "foo0")')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { foo1: number }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'const V = omit(Bar, "bar0")')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { bar1: number }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = keyof(Foo)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'type V = "foo0" \\| "foo1"')),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = keyof(Bar)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'type V = "bar0" \\| "bar1"')),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = partial(Foo)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { foo0?: string, foo1?: number }")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"const V = partial(Bar)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type V = { bar0?: string, bar1?: number }")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"formatter"},"Formatter"),(0,l.kt)("h4",{id:"formatschema"},"formatSchema"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type Signature:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const formatSchema: <T extends S.SchemaCtor<S.Schema>>(\n  Ctor: T,\n  context?: FormatContext | undefined\n) => {\n  typeId: number;\n  types: FormatTypes;\n};\n\ntype FormatContext = {\n  addType: (type: FormatType) => number;\n  formatCache: WeakMap<Function, number>;\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result = formatSchema(Number)\n\n// alternative\n{\n  typeId: 0,\n  types: {\n    '0': {\n      type: 'Scalar',\n      valueType: 'number',\n      valueName: 'Number',\n    },\n  },\n}\n")),(0,l.kt)("h3",{id:"validator"},"Validator"),(0,l.kt)("h4",{id:"createschemavalidator"},"createSchemaValidator"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type Signature:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const createSchemaValidator: <S extends S.SchemaCtor<S.Schema>>(\n  SchemaCtor: S,\n  options?: ValidatorOptions | undefined\n) => (input: unknown) => ValidationResult<S.TypeOf<S>>;\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { ID, Struct } from "farrow-schema";\nimport { Validator } from "farrow-schema/validator";\n\nconst User = Struct({\n  id: ID,\n  name: String,\n});\n\nconst result = Validator.validate(User, {\n  id: "foo",\n  name: "foo name",\n});\n\nif (result.isOk) {\n  console.log(result.value);\n}\n')),(0,l.kt)("h4",{id:"strict-mode"},"Strict Mode"),(0,l.kt)("p",null,"The strict mode is defaultly open while validating. When a Schema wrapped by ",(0,l.kt)("inlineCode",{parentName:"p"},"NonStrict"),", the strict mode will be closed. It affects below schema."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can control the strict mode by option of ",(0,l.kt)("inlineCode",{parentName:"p"},"Validator.validate"),", like:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Number, "123.32", { strict: false });\n')))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Number")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Number, 123.32);\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,l.kt)("inlineCode",{parentName:"p"},"123.32"),"(It means validate successfully)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Number, "123.32");\nconst result1 = Validator.validate(Number, "123.32", { strict: false });\n')),(0,l.kt)("p",null,"But the ",(0,l.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,l.kt)("inlineCode",{parentName:"p"},"123.32")," when strict mode is close. It will try to parse ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Int")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Int, 123);\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,l.kt)("inlineCode",{parentName:"p"},"123"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result1 = Validator.validate(Int, 123.32);\nconst result1 = Validator.validate(Int, 123.32, { strict: false });\n")),(0,l.kt)("p",null,"But the ",(0,l.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,l.kt)("inlineCode",{parentName:"p"},"123")," when strict mode is close. It will try to ",(0,l.kt)("inlineCode",{parentName:"p"},"Math.floor")," the input."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const result2 = Validator.validate(Int, "123");\nconst result2 = Validator.validate(Int, "123", { strict: false });\n')),(0,l.kt)("p",null,"But the ",(0,l.kt)("inlineCode",{parentName:"p"},"result2")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,l.kt)("inlineCode",{parentName:"p"},"123")," when strict mode is close. It will try to parse ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const result3 = Validator.validate(Int, "123.32");\nconst result3 = Validator.validate(Int, "123.32", { strict: false });\n')),(0,l.kt)("p",null,"But the ",(0,l.kt)("inlineCode",{parentName:"p"},"result3")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,l.kt)("inlineCode",{parentName:"p"},"123")," when strict mode is close. It will try to parse ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"number")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Math.floor")," the result."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Float")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Float, 123.32);\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Float, "123.32");\nconst result1 = Validator.validate(Float, "123.32", { strict: false });\n')),(0,l.kt)("p",null,"But the ",(0,l.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,l.kt)("inlineCode",{parentName:"p"},"123.32")," when strict mode is close. It will try to parse ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Boolean")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Boolean, true);\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Boolean, "true");\nconst result1 = Validator.validate(Boolean, "true", { strict: false });\n')),(0,l.kt)("p",null,"But the ",(0,l.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," when strict mode is close. It will try to parse ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Literal")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result0 = Validator.validate(Literal(123), 123);\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const result1 = Validator.validate(Literal(123), "123");\nconst result1 = Validator.validate(Literal(123), "123", { strict: false });\n')),(0,l.kt)("p",null,"But the ",(0,l.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,l.kt)("inlineCode",{parentName:"p"},"123")," when strict mode is close. It will try to parse ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Struct")),(0,l.kt)("p",null,"Schema declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const Foo = Struct({\n  id: Number,\n  name: String,\n});\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const result0 = Validator.validate(Foo, { id: 0, name: "foo" });\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"result0")," always is ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result1 = Validator.validate(Literal(123), '{ id: 0, name: \"foo\" }');\nconst result1 = Validator.validate(Literal(123), '{ id: 0, name: \"foo\" }', {\n  strict: false,\n});\n")),(0,l.kt)("p",null,"But the ",(0,l.kt)("inlineCode",{parentName:"p"},"result1")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when strict mode is open and ",(0,l.kt)("inlineCode",{parentName:"p"},'{ id: 0, name: "foo" }')," when strict mode is close. It will try to parse ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"JsonType"),"."),(0,l.kt)("h3",{id:"type-infer"},"Type Infer"),(0,l.kt)("h4",{id:"typeof"},(0,l.kt)("inlineCode",{parentName:"h4"},"TypeOf")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"type T = TypeOf<typeof $Schema>\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type T = TypeOf<typeof Number>;\n\n// alternative\ntype T = number;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type T = TypeOf<typeof List(Number)>;\n\n// alternative\ntype T = number[];\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type T = TypeOf<typeof Union(Number, String)>;\n\n// alternative\ntype T = number | string;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type T = TypeOf<typeof Struct({ foo: String })>;\n\n// alternative\ntype T = { foo: string };\n")),(0,l.kt)("h2",{id:"learn-more"},"Learn more"),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Relative Module")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/zh-cn/docs/api/rpc/farrow-api"},"farrow-api"),": Schema-based Api builder."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/zh-cn/docs/api/rpc/farrow-api-server"},"farrow-api-server"),": ",(0,l.kt)("a",{parentName:"li",href:"/zh-cn/docs/api/rpc/farrow-api"},"farrow-api")," adapter for ",(0,l.kt)("a",{parentName:"li",href:"/zh-cn/docs/api/http/farrow-http"},"farrow-http"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/zh-cn/docs/api/http/farrow-http"},"farrow-http"),": A Type-Friendly Web Framework based on ",(0,l.kt)("strong",{parentName:"li"},"farrow-pipeline"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/zh-cn/docs/api/cli/farrow-json-schema"},"farrow-json-schema"),": Tool for Transforming ",(0,l.kt)("strong",{parentName:"li"},"farrow-schema")," to ",(0,l.kt)("a",{parentName:"li",href:"https://json-schema.org/"},"json schema"),".")))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Sample")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/tqma113/farrow-sample/tree/main/samples/03-schema-base"},"farrow-sample/03-schema-base"),": Base usage of ",(0,l.kt)("strong",{parentName:"li"},"farrow-pipeline"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/tqma113/farrow-sample/tree/main/samples/04-schema-more"},"farrow-sample/04-schema-more"),": More compelex sample of ",(0,l.kt)("strong",{parentName:"li"},"farrow-pipeline"),".")))))}k.isMDXComponent=!0}}]);